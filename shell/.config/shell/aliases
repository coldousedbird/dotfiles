# misc
alias c="clear" \
      n="c && exec $SHELL" \
      e="exit" \
      q="exit" \
      sudo='sudo ' \
      doas='doas ' \
      cmatrix="cmatrix -sC yellow -u 3" \
      ff="fastfetch -s Title:Separator:OS:Host:Kernel:Uptime:Bluetooth:Packages:Processes:Display:DE:WM:Terminal:Shell:Editor:Theme:Font:CPU:GPU:Memory:Swap:Disk:Battery:Separator:Colors"


# language translation
alias ru="trans -t russian -v -j" \
      en="trans -t english -v -j"


# networking
alias ssp="ss -tunlp" \
      ncp="nc -zvn"


# show filesystem info
alias ls="ls -aHh --color=auto --group-directories-first" \
      l='eza -a --group-directories-first' \
      ll='eza -alh --group-directories-first --git-repos' \
      lt='eza -alhTL=2 --group-directories-first --git-repos --git-ignore' \
      llt='eza -alhT --group-directories-first --git-repos --git-ignore' \
      lsblk="lsblk -o NAME,TYPE,FSTYPE,FSVER,LABEL,SIZE,FSUSE%,FSUSED,FSAVAIL,MOUNTPOINTS" \
      sizes="sudo du --max-depth=1 -hL" \
      gr="grep --color=auto"

      
# edit file structure
alias mv='mv -v' \
      mkd='mkdir -vp' \
      rm="echo you probably need to use rem" \
      rem="trash-put" \
      lf="lfcd" \
      y="yazi" 

# snake-case formatting filenames
# e.g. "sOmEtHING VEry Interesting" -> "something_very_interesting"
format() { mv -vT "$1" $(echo $1 | tr '[:upper:]' '[:lower:]' | tr ' ' '_') ; }     

# lf file manager integration
lfcd() { cd "$(command lf -print-last-dir "$@")" ; }

fcd() {  # cd to folder via fzf
  cd ${1:-.}
  FIND_DIRECTORY=$(fd --no-require-git -iHL --type directory | \fzf)
  cd ${FIND_DIRECTORY:--}
}


# read & edit files
alias bat="bat --theme='Monokai Extended Bright'" \
      vi="nvim" \
      dot="cd ~/dotfiles && fvi" \
      not="cd ~/Notes && fvi" \
      va="find -mindepth 1 -type f,l | xargs nvim -p" \
      icat="kitty icat"

# diff fancy
dif() { diff -u $@ | diff-so-fancy | less -R ; }
fvi() {  # fuzzy find file and open it in vi
  FILE=$(fzf --preview='bat --color=always {}')
  test -n "$FILE" && echo $FILE && vi $FILE
}
fhx() {  # fuzzy find file and open it in vi
  FILE=$(fzf --preview='bat --color=always {}')
  test -n "$FILE" && echo $FILE && hx $FILE
}
tarc() {  # tar compress
  tar -cz $1 -f $1.tar.gz
}
tarx() {  # tar extract
  dest_name=$(basename $1)
  dest_path=$(dirname $1)/${dest_name:0:-7}
  if [ ! -d "$dest_path" ]; then
    mkdir -v $dest_path
  fi
  tar -xzf $1 -C $dest_path
}


# git & github
GIT_EXISTS=$(docker --version >& /dev/null ; echo $?)
# aliases
test GIT_EXISTS==0 && {
  alias g="git" \
        gi="g init" \
        gcl="g clone" \
        gf="g fetch" \
        gpl="g pull" \
        gpu="g push" \
        gs="g status" \
        ga="g add" \
        gb="g branch" \
        gc="g commit" \
        gsh="g show" \
        gds="gd --staged" \
        grv="g revert" \
        grb="g rebase" \
        grs="g reset" \
        grr="g restore" \
        gsh="g stash" \
        gh_log="gh auth login" \
        gh_auth="gh auth setup-git" \
        gfs="g status --porcelain | fzf | awk '{print \$NF}'"
}
# functions
test GIT_EXISTS==0 && {
  # fancy git log
  gl() { git log --color --graph --pretty=format:"%C(magenta)%h %C(white) %an  %ar%C(blue)  %D%n%s%n" $@ | less -R ; }
  
  # fuzzyfind changed files
  gd() { git diff --color=always $@ | diff-so-fancy | less -R ; }

  # fuzzy find changed file and show it's diff
  gfd() { gd $@ $(gfs) ; }
  # fuzzy find changed file and show it's staged diff
  gfds() { gds $@ $(gfs) ; }
  # fuzzy switch branch
  gsw() { git switch $(git branch -a | grep -v "remotes" | fzf | cut -c 3- | awk "{print \$1}") >/dev/null ; }
  gfa() {
    file=$(gfs)
    gd $file
    echo -n "add? (y/n): "
    read responce
    test $responce == 'y' && ga $file
    test $responce == 'yes' && ga $file
  }
}


# docker & compose
DOCKER_EXISTS=$(docker --version >& /dev/null ; echo $?)
# aliases
test DOCKER_EXISTS==0 && {
  alias d="docker" \
        di="d images" \
        dn="d networks" \
        dex="d exec -it" \
        dl="d logs" \
        dlf="d logs -f" \
        dllf="d logs -f --tail 300" \
        dps="d ps --format 'container:\t{{.ID}}, {{.Names}}, {{.Image}}\nlifetime:\t{{.RunningFor}}, {{.Status}}\nports:\t{{.Ports}}\n' | column -tL -s $'\t'"
}
# functions
test DOCKER_EXISTS==0 && {
  # open given container's shell
  dsh() { d exec -it $1 /bin/sh ; }
}
docker-compose --version >& /dev/null && {
  alias dc="docker-compose"
}
docker compose version >& /dev/null && {
  alias dc="docker compose"
}


# ssh
ssh-check-agent() {
  # check if ssh-agent exist, and if not - create it and save it's stdout (with environment variables) to file
  ! pgrep -u "$USER" ssh-agent > /dev/null && ssh-agent > ~/.ssh/agent_env
  # source environment variables from file
  source ~/.ssh/agent_env > /dev/null
  # check if key added to agent and add if not
  ! ssh-add -l > /dev/null && ssh-add
}
fhost() { # choose known ssh host via fzf
  grep --no-group-separator -A 1 '^Host [^*]*$' ~/.ssh/hosts \
  | sed 'h;s/.*//;N;G;s/^\n//;s/\n/\t/g;s/  Hostname //;s/Host //' | column -t -s $'\t' | fzf | awk '{print $2}'
}
fssh() { # ssh into chosen server and copy configs
  host=$(fhost)
  test -z $host && return 0
  echo $host
  ssh-check-agent
  # copying configs to server
  rsync ~/dotfiles/bash_light/.bashrc $host:~/.bashrc #2> /dev/null
  [ "$?" != "0" ] && (
      echo -n "rsync is not available. load configs via scp? (y/n): "
      read responce
      test $responce == 'y' && scp ~/dotfiles/bash_light/.bashrc $1:~/.bashrc 
      test $responce == 'yes' && scp ~/dotfiles/bash_light/.bashrc $1:~/.bashrc
    )
  ssh $host $@
}
fussh() { # ssh into chosen server (no configs)
  host=$(fhost)
  test -z $host && return 0
  echo $host
  ssh-check-agent
  ssh $host $@
}


# package managers
test -e /bin/dnf && {
  alias dnf_search="dnf search" \
        dnf_list="dnf list" \
        dnf_install="dnf install -y" \
        dnf_remove="dnf remove" \
        dnf_upgrade="dnf upgrade --refresh --best --allowerasing -y" \
        dnf_clean="dnf autoremove -y ; dnf clean all"
}
test -e /bin/flatpak && {
  alias flat_search="flatpak search" \
        flat_list="flatpak list" \
        flat_install="flatpak install --noninteractive -y" \
        flat_remove="flatpak remove --noninteractive -y" \
        flat_upgrade="flatpak upgrade --noninteractive -y" \
        flat_clean="flatpak uninstall --unused -y ; flatpak repair"
}
test -e /bin/pacman && {
  alias pacman_search="pacman -Ss" \
        pacman_search_installed="pacman -Qs" \
        pacman_install="pacman -S" \
        pacman_remove="sudo pacman -Rs" \
        pacman_upgrade="sudo pacman -Syu" \
        pacman_clean="sudo pacman -Qdtq | pacman -Rs -"
}
test -e /bin/apt && {
  alias apt_search="apt search" \
        apt_list="apt list" \
        apt_install="apt install" \
        apt_remove="apt autoremove" \
        apt_upgrade="apt update && apt upgrade" \
        apt_clean="apt autoclean"
}
up() {
  command -v apt_upgrade &> /dev/null && echo "APT UPGRADE" && doas apt_upgrade
  command -v apt_clean &> /dev/null && echo "APT CLEAN" && doas apt_clean
  command -v dnf_upgrade &> /dev/null && echo "DNF UPGRADE" && doas dnf_upgrade
  command -v dnf_clean &> /dev/null && echo "DNF CLEAN" && doas dnf_clean
  command -v flat_upgrade &> /dev/null && echo "FLATPAK UPGRADE" && doas flat_upgrade
  command -v flat_clean &> /dev/null && echo "FLATPAK CLEAN" && doas flat_clean
  command -v pacman_upgrade &> /dev/null && echo "PACMAN UPGRADE" && doas pacman_upgrade
  command -v pacman_clean &> /dev/null && echo "PACMAN CLEAN" && doas pacman_clean
}

